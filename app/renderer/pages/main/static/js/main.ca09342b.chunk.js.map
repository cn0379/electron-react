{"version":3,"sources":["peer-puppet.js","App.tsx","reportWebVitals.js","index.tsx","../external \"events\""],"names":["window","require","ipcRenderer","desktopCapturer","peer","EventEmitter","on","e","offer","console","log","pc","RTCPeerConnection","getScreenStream","a","getSources","types","sources","Promise","resolve","reject","navigator","webkitGetUserMedia","audio","video","mandatory","chromeMediaSource","chromeMediaSourceId","id","maxWidth","screen","width","maxHeight","height","stream","candidate","type","addIceCandidate","RTCIceCandidate","addStream","setRemoteDescription","createAnswer","setLocalDescription","JSON","stringify","localDescription","ondatachannel","channel","onmessage","parse","data","send","onicecandidate","then","answer","sdp","App","props","useState","remoteCode","setRemoteCode","localCode","setLocalCode","controlText","setControlText","login","invoke","code","useEffect","handleControlState","removeListener","name","text","className","value","onChange","target","onClick","startControl","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ca09342b.chunk.js","sourcesContent":["import EventEmitter from 'events'\r\nconst {ipcRenderer, desktopCapturer} = window.require('electron')\r\nlet peer = new EventEmitter()\r\nwindow.peer = peer // 为了直接模拟过程，信令结束后，会删掉\r\nipcRenderer.on('offer', (e, offer) => {\r\n    console.log('init pc', offer)\r\n    const pc = new window.RTCPeerConnection();\r\n\t\r\n    pc.ondatachannel = (e) => {\r\n        console.log('data', e)\r\n\t\te.channel.onmessage = (e)  => {\r\n\t\t\tconsole.log('onmessage', e, JSON.parse(e.data))\r\n           let {type, data} = JSON.parse(e.data)\r\n            console.log('robot', type, data)\r\n            if(type === 'mouse') {\r\n                data.screen = {\r\n                    width: window.screen.width, \r\n                    height: window.screen.height\r\n                }\r\n            }\r\n            ipcRenderer.send('robot', type, data)\r\n\t\t}\r\n\t}\r\n\r\n    async function getScreenStream() {\r\n        const sources = await desktopCapturer.getSources({types: ['screen']})\r\n        return new Promise((resolve, reject) => {\r\n            navigator.webkitGetUserMedia({\r\n                audio: false,\r\n                video: {\r\n                    mandatory: {\r\n                        chromeMediaSource: 'desktop',\r\n                        chromeMediaSourceId: sources[0].id,\r\n                        maxWidth: window.screen.width,\r\n                        maxHeight: window.screen.height\r\n                    }\r\n                }\r\n            }, (stream) => {\r\n                console.log('add-stream', stream)\r\n                resolve(stream)\r\n            }, reject)\r\n        })\r\n    }\r\n    \r\n    pc.onicecandidate = (e) => {\r\n        // 告知其他人\r\n        ipcRenderer.send('forward', 'puppet-candidate', e.candidate)\r\n    }\r\n\r\n\tasync function addIceCandidate(candidate) {\r\n        if(!candidate || !candidate.type) return\r\n\t\tawait pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n\t}\r\n\twindow.addIceCandidate = addIceCandidate\r\n\r\n    async function createAnswer(offer) {\r\n        let stream = await getScreenStream()\r\n        pc.addStream(stream)\r\n        await pc.setRemoteDescription(offer);\r\n        await pc.setLocalDescription(await pc.createAnswer());\r\n        console.log('create answer \\n', JSON.stringify(pc.localDescription))\r\n        return pc.localDescription\r\n    }\r\n    createAnswer(offer).then((answer) => {\r\n        ipcRenderer.send('forward', 'answer', {type: answer.type, sdp: answer.sdp})\r\n    })\r\n\t\r\n})\r\nexport default peer\r\n\r\n","import React, { useEffect, useState } from 'react'\nimport './app.css'\nimport './peer-puppet.js'\n\nconst { ipcRenderer } = window.require('electron')\ntype propsType = {\n\n}\n\nconst App: React.FC<propsType> = (props) => {\n    const [remoteCode, setRemoteCode] = useState('')\n    const [localCode, setLocalCode] = useState('')\n     // 0未连接，1已控制，2被控制\n    const [controlText, setControlText] = useState('')\n    const login = async () => {\n        let  code = await ipcRenderer.invoke('login')\n        setLocalCode(code)\n    }\n    useEffect(() => {\n        login()\n        ipcRenderer.on('control-state-change', handleControlState)\n        return () => {\n            ipcRenderer.removeListener('control-state-change', handleControlState)\n        }\n    }, [])\n\n    const handleControlState = (e: Event, name: string, type: number) => {\n        let text = ''\n        if (type === 1) {\n            text = `正在控制远程${name}`\n        } else if (type === 2) {\n            text = `被${name}控制中`\n        }else {\n            text = ''\n        }\n        setControlText(text)\n    }\n\n    const startControl = (remoteCode: string) => {\n        ipcRenderer.send('control', remoteCode)\n    }\n    return (\n        <div className='container'>\n            {\n                controlText === '' ? <>\n                    <div>\n                        你的控制码{localCode}\n                    </div>\n                    <input type=\"text\" value={remoteCode} onChange={(e) =>\n                        setRemoteCode(e.target.value)\n                    } />\n                    <button onClick={() => startControl(remoteCode)} >确认</button>\n                </> : <div>{controlText}</div>\n            }\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = require(\"events\");"],"sourceRoot":""}